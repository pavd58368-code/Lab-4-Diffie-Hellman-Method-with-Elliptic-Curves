class EllipticCurve:
    def __init__(self, a, b, p):
        self.a = a
        self.b = b
        self.p = p

    def is_point_on_curve(self, x, y):
        return (y**2) % self.p == (x**3 + self.a * x + self.b) % self.p

    def point_add(self, P, Q):
        """Addition of two points P and Q on the elliptic curve."""
        if P == Q:
            m = (3 * P[0]**2 + self.a) * pow(2 * P[1], -1, self.p) % self.p
        else:
            m = (Q[1] - P[1]) * pow(Q[0] - P[0], -1, self.p) % self.p

        res_x = (m**2 - P[0] - Q[0]) % self.p
        res_y = (m * (P[0] - res_x) - P[1]) % self.p
        return (res_x, res_y)

    def scalar_multiplication(self, k, G):
        """Scalar multiplication of point G by integer k."""
        result = None
        Q = G
        while k > 0:
            if k % 2 == 1:
                result = Q if result is None else self.point_add(result, Q)
            Q = self.point_add(Q, Q)
            k //= 2
        return result


# Input data
a, b, p = 2, 3, 97
G = (3, 6)
k1, k2 = 6, 10

curve = EllipticCurve(a, b, p)

print(f"Point G on curve: {curve.is_point_on_curve(*G)}")

R1 = curve.scalar_multiplication(k1, G)
R2 = curve.scalar_multiplication(k2, G)

print("R1 =", R1)
print("R2 =", R2)
